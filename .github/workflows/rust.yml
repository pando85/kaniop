name: Rust

"on":
  push:
    branches: [master]
    tags:
      - v*
  pull_request:
    branches: [master]

jobs:
  determine_changes:
    name: Determine changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.changed.outputs.code_any_changed }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Determine changed files
        id: changed
        shell: bash
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha || 'origin/master' }}...HEAD)
          CODE_CHANGED=false
          while IFS= read -r file; do
            # Skip documentation files
            if [[ "${file}" =~ ^Documentation/ ]]; then
              echo "Skipping ${file} (matches Documentation/ pattern)"
              continue
            fi
            # Skip generated example YAML files
            if [[ "${file}" =~ ^examples/ ]]; then
              echo "Skipping ${file} (matches examples/ pattern)"
              continue
            fi
            # Skip markdown files
            if [[ "${file}" =~ \.md$ ]]; then
              echo "Skipping ${file} (matches *.md pattern)"
              continue
            fi
            # Skip artwork/assets
            if [[ "${file}" =~ ^artwork/ ]]; then
              echo "Skipping ${file} (matches artwork/ pattern)"
              continue
            fi
            echo "Detected code change in: ${file}"
            CODE_CHANGED=true
            break
          done <<< "${CHANGED_FILES}"
          echo "code_any_changed=${CODE_CHANGED}" >> "${GITHUB_OUTPUT}"

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    needs: determine_changes
    if: ${{ needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install fmt with stable toolchain
        id: toolchain
        uses: dtolnay/rust-toolchain@stable

      - run: rustup override set ${{steps.toolchain.outputs.name}}
      - run: rustup component add rustfmt

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: determine_changes
    if: ${{ needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install clippy with stable toolchain
        id: toolchain
        uses: dtolnay/rust-toolchain@stable
      - run: rustup override set ${{steps.toolchain.outputs.name}}
      - run: rustup component add clippy
      - uses: Swatinem/rust-cache@v2

      - uses: clechasseur/rs-clippy-check@v5
        with:
          args: --locked --all-targets --all-features

  build:
    strategy:
      fail-fast: false
      matrix:
        job:
          - {os: ubuntu-24.04-arm, target: aarch64-unknown-linux-gnu, use-cross: false}
          - {os: ubuntu-24.04, target: x86_64-unknown-linux-gnu}
    name: (${{ matrix.job.os }}) ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    needs: determine_changes
    if: ${{ needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache && mkdir -p /opt/hostedtoolcache

      - name: Checkout source code
        uses: actions/checkout@v5

      - name: Install prerequisites
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            arm-unknown-linux-*) sudo apt-get -y update ; sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
            aarch64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu ;;
          esac

      - name: Install Rust toolchain
        id: toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}

      - run: rustup override set ${{steps.toolchain.outputs.name}}
      - run: rustup component add rustfmt clippy

      - uses: Swatinem/rust-cache@v2
        with:
          # not reuse cache between different targets:
          # https://github.com/cross-rs/cross/issues/39#issuecomment-270684223
          key: ${{ matrix.job.target }}
          workspaces: ". -> target-${{ matrix.job.target }}"
      - name: Run tests
        run: CARGO_TARGET=${{ matrix.job.target }} make test

      - name: Run integration tests
        run: CARGO_TARGET=${{ matrix.job.target }} make integration-test

      # Run e2e tests only on x86_64 target until we have aarch64 runner
      - name: Install kind
        if: matrix.job.use-cross != true
        uses: helm/kind-action@v1.12.0
        with:
          # renovate: datasource=github-releases depName=kubernetes-sigs/kind
          version: v0.30.0
          install_only: true

      - name: Install helm
        if: matrix.job.use-cross != true
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Run e2e tests
        if: matrix.job.use-cross != true
        run: |
          if [ "${{ matrix.job.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export RUST_TEST_THREADS=8
          else
            export RUST_TEST_THREADS=16
          fi
          CARGO_TARGET=${{ matrix.job.target }} E2E_LOGGING_LEVEL=info make e2e-test

      - name: Publish crates
        if: matrix.job.target == 'x86_64-unknown-linux-gnu' && startsWith(github.ref, 'refs/tags/')
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        shell: bash
        run: |
          echo "${CRATES_IO_TOKEN}" | cargo login
          make publish
